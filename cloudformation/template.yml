AWSTemplateFormatVersion: 2010-09-09
Description: Create private container registry environment

Parameters:
  ContainerCLI:
    Type: String
    Default: docker
    AllowedValues:
      - docker
      - podman
    Description: Choose which container CLI you want to use

  RegistryDomain:
    Type: String
    Default: registry.tuimac.com

  ClientDomain:
    Type: String
    Default: client.tuimac.com

  EfsDomain:
    Type: String
    Default: efs.tuimac.com

  VpcCidr:
    Type: String
    Default: 10.0.0.0/28

  SubnetACidr:
    Type: String
    Default: 10.0.0.0/28

  RegistryIP:
    Type: String
    Default: 10.0.0.4

  ClientIP:
    Type: String
    Default: 10.0.0.5

  EFSIP:
    Type: String
    Default: 10.0.0.6

  DockerAMIID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: Latest Amazon Linux 2 AMI

  PodmanAMIID:
    Type: String
    Default: ami-0a46491bf29e538d1
    Description: RHEL-8.4.0_HVM-20210825-x86_64-0-Hourly2-GP2

  S3BucketName:
    Type: String
    Default: tuimac-private-container-registry

  SSHPemFilename:
    Type: String
    Default: tuimac

  TagKey:
    Type: String
    Default: Name

  TagValue:
    Type: String
    Default: private_registry

Conditions:
  IsDockerCLI:
    !Equals
      - !Ref ContainerCLI
      - podman

Resources:
  # VPC
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
 
  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  # Subnet
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetACidr
      AvailabilityZone: ap-northeast-3a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  # RouteTable
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  InternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RouteTableAccociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA

  # Security Group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref TagValue
      GroupDescription: for test
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: !Ref VpcCidr
          Description: ANY
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: ANY
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  # Endpoint
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument: '{
        "Version": "2012-10-17",
        "Statement":[{
          "Effect": "Allow",
          "Principal": "*",
          "Action": "*",
          "Resource": "*"
        }]
      }'
      RouteTableIds:
        - !Ref RouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref Vpc

  # S3 Bucket
  Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Ref S3BucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
  
  # EFS
  EFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      BackupPolicy:
        Status: DISABLED
      Encrypted: true
      FileSystemTags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
      PerformanceMode: generalPurpose
      ThroughputMode: bursting

  EFSMountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref SubnetA
      IpAddress: !Ref EFSIP
      SecurityGroups:
        - !Ref SecurityGroup

  # IAM Role
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2InstanceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: EC2InstancePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:*"
                  - "s3:*"
                Resource:
                  - "*"
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2InstanceRole

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-LambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-LambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource:
                  - "*"
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue 

  SpotFleetInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SpotFleetInstance
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - spotfleet.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  # Custom Resource
  DeleteS3Objects:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.6
      Timeout: 60
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn
      FunctionName: DeleteS3Objects
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
      Code:
        ZipFile: |
          import json
          import traceback
          import cfnresponse
          import boto3
          import os
          import time
          from botocore.exceptions import ClientError
          def handler(event, context):
            response = {}
            try:
              if event['RequestType'] == 'Delete':
                s3 = boto3.resource('s3')
                bucket = s3.Bucket(BUCKET_NAME)
                bucket.objects.all().delete()
                client = boto3.client('s3')
                client.delete_bucket(Bucket=BUCKET_NAME)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, response)
              else:
                cfnresponse.send(event, context, cfnresponse.SUCCESS, response)
           	except ClientError as e:
              cfnresponse.send(event, context, cfnresponse.FAILED, response)
              raise e
  
  DeleteS3ObjectsResource:
    Type: Custom::DeleteS3ObjectsResource
    DependsOn: Bucket
    Properties:
      ServiceToken: !GetAtt DeleteS3Objects.Arn
      BUCKET_NAME: !Ref S3BucketName

  # EC2 Instance
  RegistryServer:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        IamFleetRole: !GetAtt SpotFleetInstanceRole.Arn
        TerminateInstancesWithExpiration: false
        InstanceInterruptionBehavior: stop
        TargetCapacity: 1
        LaunchSpecifications:
          - BlockDeviceMappings:
              - DeviceName: /dev/sda1
                Ebs:
                  DeleteOnTermination: true
                  Encrypted: true
                  Iops: 3000
                  VolumeSize: 10
                  VolumeType: gp3
            IamInstanceProfile:
              Arn: !GetAtt EC2InstanceProfile.Arn
            ImageId:
              !If
                - IsDockerCLI
                - !Ref PodmanAMIID
                - !Ref DockerAMIID
            InstanceType: t3.small
            Monitoring:
              Enabled: false
            NetworkInterfaces:
              - AssociatePublicIpAddress: true
                DeleteOnTermination: true
                Description: ContainerCLI Container Resitry Server
                Groups:
                  - !Ref SecurityGroup
                SubnetId: !Ref SubnetA
                DeviceIndex: 0
                PrivateIpAddresses: 
                  - Primary: true
                    PrivateIpAddress: !Ref RegistryIP
            IamInstanceProfile:
              Arn: !GetAtt EC2InstanceProfile.Arn
            SpotPrice: 1
            KeyName: !Ref SSHPemFilename
            TagSpecifications:
              - ResourceType: instance
                Tags:
                  - Key: Name
                    Value: registry
            UserData:
              Fn::Base64:
                !If
                  - IsDockerCLI
                  - !Sub
                    - |
                      #!/bin/bash
                      LOG=/var/log/user-data.log
                      touch $LOG
                      exec >> $LOG 2>&1
                          echo '8.4' > /etc/yum/vars/releasever
                          echo '8.4' > /etc/dnf/vars/releasever
                          dnf update -y
                          dnf install -y podman git
                          echo ${EFSIP}' efs.tuimac.com' >> /etc/hosts
                          echo ${SERVERIP}' registry.tuimac.com' >> /etc/hosts
                          echo ${CLIENTIP}' client.tuimac.com' >> /etc/hosts
                          hostnamectl set-hostname registry.tuimac.com
                          sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
                          cd /home/ec2-user
                          git clone https://github.com/tuimac/private_container_registry; echo "cloned"
                          chown ec2-user:ec2-user -R /home/ec2-user/private_container_registry
                          echo ${EFS_DOMAIN}':/ /etc/containers/certs.d nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev,nofail 0 0' >> /etc/fstab
                          mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${EFS_DOMAIN}:/ /etc/containers/certs.d
                          cd private_container_registry/registry 
                          sudo -u ec2-user -i './run.sh create'
                          reboot
                    - {
                        SERVERIP: !Ref RegistryIP,
                        CLIENTIP: !Ref ClientIP,
                        EFSIP: !Ref EFSIP,
                        REGISTRY_DOMAIN: !Ref RegistryDomain,
                        CLIENT_DOMAIN: !Ref ClientDomain,
                        EFS_DOMAIN: !Ref EfsDomain,
                      }
                  - !Sub
                    - |
                      #!/bin/bash
                      LOG=/var/log/user-data.log
                      touch $LOG
                      exec >> $LOG 2>&1
                          yum update -y
                          yum install -y docker git
                          echo ${EFSIP}' '${EFS_DOMAIN} >> /etc/hosts
                          echo ${SERVERIP}' '${REGISTRY_DOMAIN} >> /etc/hosts
                          echo ${CLIENTIP}' '${CLIENT_DOMAIN} >> /etc/hosts
                          hostnamectl set-hostname ${REGISTRY_DOMAIN}
                          systemctl enable docker
                          systemctl start docker
                          usermod -aG docker ec2-user
                          cd /home/ec2-user
                          git clone https://github.com/tuimac/private_container_registry; echo "cloned"
                          chown ec2-user:ec2-user -R /home/ec2-user/private_container_registry
                          echo ${EFS_DOMAIN}':/ /etc/docker/certs.d nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev,nofail 0 0' >> /etc/fstab
                          mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${EFS_DOMAIN}:/ /etc/docker/certs.d
                          cd private_container_registry/registry 
                          sudo -u ec2-user -i './run.sh create'
                          reboot
                    - {
                        SERVERIP: !Ref RegistryIP,
                        CLIENTIP: !Ref ClientIP,
                        EFSIP: !Ref EFSIP,
                        REGISTRY_DOMAIN: !Ref RegistryDomain,
                        CLIENT_DOMAIN: !Ref ClientDomain,
                        EFS_DOMAIN: !Ref EfsDomain,
                      }

  ClientServer:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        IamFleetRole: !GetAtt SpotFleetInstanceRole.Arn
        TerminateInstancesWithExpiration: false
        InstanceInterruptionBehavior: stop
        TargetCapacity: 1
        LaunchSpecifications:
          - BlockDeviceMappings:
              - DeviceName: /dev/sda1
                Ebs:
                  DeleteOnTermination: true
                  Encrypted: true
                  Iops: 3000
                  VolumeSize: 10
                  VolumeType: gp3
            IamInstanceProfile:
              Arn: !GetAtt EC2InstanceProfile.Arn
            ImageId:
              !If
                - IsDockerCLI
                - !Ref PodmanAMIID
                - !Ref DockerAMIID
            InstanceType: t3.small
            Monitoring:
              Enabled: false
            NetworkInterfaces:
              - AssociatePublicIpAddress: true
                DeleteOnTermination: true
                Description: ContainerCLI Client Server
                Groups:
                  - !Ref SecurityGroup
                SubnetId: !Ref SubnetA
                DeviceIndex: 0
                PrivateIpAddresses: 
                  - Primary: true
                    PrivateIpAddress: !Ref ClientIP
            IamInstanceProfile:
              Arn: !GetAtt EC2InstanceProfile.Arn
            SpotPrice: 1
            KeyName: !Ref SSHPemFilename
            TagSpecifications:
              - ResourceType: instance
                Tags:
                  - Key: Name
                    Value: client
            UserData:
              Fn::Base64:
                !If
                  - IsDockerCLI
                  - !Sub
                    - |
                      #!/bin/bash
                      LOG=/var/log/user-data.log
                      touch $LOG
                      exec >> $LOG 2>&1
                          echo '8.4' > /etc/yum/vars/releasever
                          echo '8.4' > /etc/dnf/vars/releasever
                          dnf update -y
                          dnf install -y podman git
                          echo ${EFSIP}' '${EFS_DOMAIN} >> /etc/hosts
                          echo ${SERVERIP}' '${REGISTRY_DOMAIN} >> /etc/hosts
                          echo ${CLIENTIP}' '${CLIENT_DOMAIN} >> /etc/hosts
                          hostnamectl set-hostname ${CLIENT_DOMAIN}
                          sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
                          cd /home/ec2-user
                          git clone https://github.com/tuimac/private_container_registry; echo "cloned"
                          chown ec2-user:ec2-user -R /home/ec2-user/private_container_registry
                          echo ${EFS_DOMAIN}':/ /etc/containers/certs.d nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev,nofail 0 0' >> /etc/fstab
                          mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${EFS_DOMAIN}:/ /etc/containers/certs.d
                          reboot
                    - {
                        SERVERIP: !Ref RegistryIP,
                        CLIENTIP: !Ref ClientIP,
                        EFSIP: !Ref EFSIP,
                        REGISTRY_DOMAIN: !Ref RegistryDomain,
                        CLIENT_DOMAIN: !Ref ClientDomain,
                        EFS_DOMAIN: !Ref EfsDomain,
                      }
                  - !Sub
                    - |
                      #!/bin/bash
                      LOG=/var/log/user-data.log
                      touch $LOG
                      exec >> $LOG 2>&1
                          yum update -y
                          yum install -y docker git
                          echo ${EFSIP}' '${EFS_DOMAIN} >> /etc/hosts
                          echo ${SERVERIP}' '${REGISTRY_DOMAIN} >> /etc/hosts
                          echo ${CLIENTIP}' '${CLIENT_DOMAIN} >> /etc/hosts
                          hostnamectl set-hostname registry.tuimac.com
                          systemctl enable docker
                          systemctl start docker
                          usermod -aG docker ec2-user
                          hostnamectl set-hostname ${CLIENT_DOMAIN}
                          cd /home/ec2-user
                          git clone https://github.com/tuimac/private_container_registry; echo "cloned"
                          chown ec2-user:ec2-user -R /home/ec2-user/private_container_registry
                          echo ${EFS_DOMAIN}':/ /etc/docker/certs.d nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev,nofail 0 0' >> /etc/fstab
                          mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${EFS_DOMAIN}:/ /etc/docker/certs.d
                          reboot
                    - {
                        SERVERIP: !Ref RegistryIP,
                        CLIENTIP: !Ref ClientIP,
                        EFSIP: !Ref EFSIP,
                        REGISTRY_DOMAIN: !Ref RegistryDomain,
                        CLIENT_DOMAIN: !Ref ClientDomain,
                        EFS_DOMAIN: !Ref EfsDomain,
                      }
